[{
        "title": "Start by creating a new project in IntelliJ",
        "exerpt": "starting with the ? and everything thereafter and attach it to one link or all links located in a < a > tag(s) on the page.",
        "body": "Under new project, on the left side, click Maven. Add your project name and the location of the project to be save. Choose your JDK version, in our case, we use Java 8. You should see something similar below,new project .Click Next. The GroupId and ArtifactId will be filled by default values based on the project name. Tick in Create from arechetype, and choose org.apache.maven.archetypes:maven-archetype-webapp. Click Next to continue creating the project.new project 2 After creating the project, you should see your project structure to something similar below,"
    },
    {
        "title": "Configure pom.xml",
        "exerpt": "Take the parameter from the variable 'pid1' ",
        "body": "On the right side, open Maven Projects. In case this tab is not visible, you can open this by click the square located at the lower left corner a. Under Maven Projects, open your webapp project, click plugins and double click jetty:run. To debug, right click jetty:run and click debug project. This will deploy your project.maven jetty In the console you can see the status of your deployment. Once you see something like Started SelectChannelConnector@0.0.0.0:8080, you can now browse the web at address localhost:8080/ProjectName and you should see the default jsp page"
    },
    { "title": "Form post Handling proc1 ", "exerpt": "starting with the ? and everything thereafter and attach it to one link or all links located in a < a > tag(s) on the page.", "body": "We're properly handling a form submit rather than a button press. Some people like to push enter on fields. Some people use alternative input devices such as speech input or other accessibility devices. Handle the form submit and you correctly solve it for everyone.We're digging into the form data for the actual form that was submitted. If you change your form selector later, you don't have to change the selectors for all the fields. Furthermore, you might have several forms with the same input names. No need to disambiguate with excessive IDs and what not, just track the inputs based on the form that was submitted. This also enables you to use a single event handler for multiple forms if that is appropriate for your situation." },
    { "title": "Form Handling continued", "exerpt": "I was extremely tired yesternight", "body": "The FormData interface is fairly new, but is well supported by browsers. It's a great way to build that data collection to get the real values of what's in the form. Without it, you're going to have to loop through all the elements (such as with form.elements) and figure out what's checked, what isn't, what the values are, etc. Totally possible if you need old browser support, but the FormData interface is simpler.I'm using ES6 here... not a requirement by any means, so change it back to be ES5 compatible if you need old browser support." },
    { "title": "Passing a parameter to a link inside an < a > href tag ", "exerpt": "jokes are fun", "body": "Yeah,shoter body " }
]